plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'

    id 'application'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.26.2'
    id 'org.sonarqube' version '6.1.0.5360'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = 'com.example.demo.DemoApplication'  // Update to your main class
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools:3.5.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    

    // Optional older JUnit dependencies
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    //testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

// Test configuration with finalizedBy
tasks.named('test') {
    useJUnitPlatform()
    reports {
        junitXml.required.set(true)
        junitXml.outputLocation.set(layout.buildDirectory.dir("test-results/test"))
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/tests/test"))
    }

    // Run coverage reports after tests
    finalizedBy("jacocoTestReport","jacocoTestCoverageVerification")
}

tasks.named('jacocoTestReport') {
    finalizedBy('printCoverage')
    reports {
        xml.required.set(true)
        html.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("jacocoHtml/jacocoTestReport.xml"))
        csv.required.set(false)
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
}

// Configure existing jacocoTestCoverageVerification (no register)
tasks.named('jacocoTestCoverageVerification') {
    violationRules {
        rule {
            limit {
                minimum = 0.30 // 30% required coverage
            }
        }
    }
}
import javax.xml.parsers.SAXParserFactory

tasks.register('printCoverage') {
    doLast {
        def xmlFile = file("build/reports/jacoco/test/jacocoTestReport.xml")
        if (!xmlFile.exists()) {
            println "JaCoCo XML report not found."
            return
        }

        // Secure parser config
        def factory = SAXParserFactory.newInstance()
        factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
        factory.setFeature("http://xml.org/sax/features/external-general-entities", false)
        factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true)
        factory.setNamespaceAware(true)

        def saxParser = factory.newSAXParser()
        def xmlReader = saxParser.getXMLReader()
        def parser = new XmlParser(xmlReader)

        def report = parser.parse(xmlFile)
        def counter = report.counter.find { it.@type == 'LINE' }

        if (counter) {
            def covered = counter.@covered.toInteger()
            def missed = counter.@missed.toInteger()
            def total = covered + missed
            def percent = (covered * 100.0 / total).round(2)
            println "\n>> Code Line Coverage: ${percent}%"
        } else {
            println "No LINE counter found in JaCoCo XML."
        }
    }
}

tasks.named('shadowJar') {
    archiveBaseName.set('app')
    archiveVersion.set(version)
    archiveClassifier.set('')
    manifest {
        attributes 'Main-Class': 'com.example.demo.DemoApplication'
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': application.mainClass.get()
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(bootJar.archiveFile) {
                builtBy bootJar
                extension 'jar'
            }
        }
    }
}


def isSnapshot = version.endsWith('-SNAPSHOT')

artifactory {
    contextUrl = 'http://192.168.100.62:8082/artifactory'
    publish {
        repository {
            repoKey = isSnapshot ? 'libs-snapshot-local' : 'libs-release-local'
            username = project.findProperty("artifactory_user") ?: "admin"
            password = project.findProperty("artifactory_password") ?: "Chella*123"
        }
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            publishPom = true
        }
    }
}
